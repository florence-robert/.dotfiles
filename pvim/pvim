#!/usr/bin/env sh

os="$(uname)"
isDarwin=false

# Use a function to check if the OS is Darwin and set the flag
check_darwin() {
  if [ "$os" == "Darwin" ]; then
    isDarwin=true
  fi
}

check_darwin

if [ "$isDarwin" = true ]; then
  export PVIM=$(dirname $(readlink -f -- "$0"))
  export BIN="/nvim-macos/bin/nvim"
  export UPDATE="$PVIM/pvim-update --darwin"
else
  export PVIM=$(dirname $(readlink -e -- "$0"))
  export BIN="/nvim.appimage"
  export UPDATE="$PVIM/pvim-update"
fi

set_nv() {
  echo "bin path $PVIM$BIN"
  if [ -f $PVIM$BIN ]; then
    NV="$PVIM$BIN"
  elif command -v nvim >/dev/null && [ "$(readlink -f $(which nvim))" != "$PVIM/pvim" ]; then
    NV="nvim"
  else
    echo "Initializing PVIM"
    exec $UPDATE
    NV="$PVIM$BIN"
  fi
}

set_nv

# initialize update flag to false
update=false

# check for --update flag
if [ $# -gt 0 ]; then
  while [ "$1" != "" ]; do
    case $1 in
    --update)
      update=true
      shift
      ;;
    *)
      break
      ;;
    esac
  done
fi

# Use a function to run the update command based on the OS
if [ "$update" = true ]; then
  if [ "$isDarwin" = true ]; then
    $PVIM/pvim-update --darwin
  else
    $PVIM/pvim-update
  fi
else
  # Handle the case where the update flag is not set
  exec $NV --clean -i "$PVIM/clutter/shada/state" -u "$PVIM/pvim.lua" $@
fi
